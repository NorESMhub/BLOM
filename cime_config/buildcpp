#!/usr/bin/env python

"""
Set BLOM cppdefs
"""
import os, sys, filecmp, shutil

_CIMEROOT = os.environ.get("CIMEROOT")
if _CIMEROOT is None:
    raise SystemExit("ERROR: must set CIMEROOT environment variable")
sys.path.append(os.path.join(_CIMEROOT, "scripts", "Tools"))

from standard_script_setup import *

from CIME.case import Case
from CIME.utils import run_cmd, expect
from CIME.buildnml import parse_input

logger = logging.getLogger(__name__)

###############################################################################
def create_dimmod(case):
###############################################################################
    """
    Create dimension Fortran module consistent with ocn tasks
    """

    # create $CASEROOT/Buildconf/blomconf if it does not exist
    caseroot = case.get_value("CASEROOT")
    blomconf_dir = os.path.join(caseroot, "Buildconf", "blomconf")
    if not os.path.exists(blomconf_dir):
        os.makedirs(blomconf_dir)

    # create dimension module in $CASEROOT/Buildconf/blomconf

    comp_root_dir_ocn = case.get_value("COMP_ROOT_DIR_OCN")
    ocn_grid = case.get_value("OCN_GRID")
    blom_vcoord = case.get_value("BLOM_VCOORD")
    ntasks_ocn = case.get_value("NTASKS_OCN")
    objroot = case.get_value("OBJROOT")

    gridconf_dir = os.path.join(comp_root_dir_ocn, "bld", ocn_grid)
    kdm_file = os.path.join(gridconf_dir, "kdm." + blom_vcoord)
    blom_dimensions_script = os.path.join(comp_root_dir_ocn, "bld", "blom_dimensions")

    try:
        with open(kdm_file, "r") as kdm_file_obj:
            kdm = kdm_file_obj.read().strip()
    except:
        expect(False, "Failed to read kdm from file {}".format(kdm_file))

    cmd = "{} -n {} -k {} -d {}".format(blom_dimensions_script, ntasks_ocn, kdm, gridconf_dir)
    rc, out, err = run_cmd(cmd, from_dir=blomconf_dir)
    expect(rc == 0, "Command %s failed rc=%d\nout=%s\nerr=%s" % (cmd, rc, out, err))

    # copy dimension module to $OBJROOT/ocn/src if identical dimension module does not already exist

    dimmod_dir = os.path.join(objroot, "ocn", "src")
    if not os.path.exists(dimmod_dir):
        os.makedirs(dimmod_dir)

    dimmod_new_file = os.path.join(blomconf_dir, "dimensions.F")
    dimmod_file = os.path.join(dimmod_dir, "dimensions.F")
    if not os.path.exists(dimmod_file) or not filecmp.cmp(dimmod_new_file, dimmod_file):
        shutil.copy2(dimmod_new_file, dimmod_dir)


###############################################################################
def buildcpp(case):
###############################################################################
    """
    Set build time options
    """

    # Create dimension Fortran module consistent with ocn tasks
    create_dimmod(case)

    # Determine the CPP flags values needed to build the blom component

    ocn_grid = case.get_value("OCN_GRID")
    turbclo = case.get_value("BLOM_TURBULENT_CLOSURE")
    tracers = case.get_value("BLOM_TRACER_MODULES")
    blom_unit = case.get_value("BLOM_UNIT")
    pio_typename = case.get_value("PIO_TYPENAME", subgroup="OCN")

    blom_cppdefs = ""

    if pio_typename == "pnetcdf":
        blom_cppdefs = blom_cppdefs + " -DPNETCDF"

    if ocn_grid in ["tnx2v1", "tnx1.5v1", "tnx1v1", "tnx1v3", "tnx1v4", "tnx0.25v1", "tnx0.25v3", "tnx0.25v4", "tnx0.125v4"]:
        blom_cppdefs = blom_cppdefs + " -DARCTIC"

    if ocn_grid in ["gx1v5", "gx1v6", "tnx1v1", "tnx1v3", "tnx1v4", "tnx0.25v1", "tnx0.25v3", "tnx0.25v4", "tnx0.125v4"]:
        blom_cppdefs = blom_cppdefs + " -DLEVITUS2X"

    if turbclo or tracers:
        blom_cppdefs = blom_cppdefs + " -DTRC"

    if turbclo:
        twoeq = False
        oneeq = False
        for option in turbclo.split():
            if option == "twoeq":
                blom_cppdefs = blom_cppdefs + " -DTKE -DGLS"
                twoeq = True
            elif option == "oneeq":
                blom_cppdefs = blom_cppdefs + " -DTKE"
                oneeq = True
            elif option == "advection":
                blom_cppdefs = blom_cppdefs + " -DTKEADV"
            elif option == "isodif":
                blom_cppdefs = blom_cppdefs + " -DTKEIDF"
            else:
                expect(False, "Turbulent closure option {} is not recognized".format(option))
        expect(twoeq or oneeq, "For turbulent closure either twoeq or oneeq must be provided as options")
        expect(not twoeq or not oneeq, "Do not use both twoeq and oneeq as options for turbulent closure")

    if tracers:
        for module in tracers.split():
            if module == "iage":
                blom_cppdefs = blom_cppdefs + " -DIDLAGE"
            elif module == "ecosys":
                blom_cppdefs = blom_cppdefs + " -DHAMOCC"
            else:
                expect(False, "tracer module {} is not recognized".format(module))

    if blom_unit == "mks":
        blom_cppdefs = blom_cppdefs + " -DMKS"
    else:
        expect(blom_unit == "cgs", "Unit system {} is not recognized".format(blom_unit))

    blom_cppdefs = "-DMPI" + blom_cppdefs

    return blom_cppdefs

###############################################################################

def _main_func():

    caseroot = parse_input(sys.argv)
    with Case(caseroot, read_only=False) as case:
        blom_cppdefs = buildcpp(case)
    logger.info("BLOM_CPPDEFS: %s", blom_cppdefs)

if __name__ == "__main__":
    _main_func()
