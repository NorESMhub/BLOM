#!/usr/bin/env python

"""
build blom library
"""
import os, shutil, sys, glob, imp

_CIMEROOT = os.environ.get("CIMEROOT")
if _CIMEROOT is None:
    raise SystemExit("ERROR: must set CIMEROOT environment variable")
sys.path.append(os.path.join(_CIMEROOT, "scripts", "Tools"))

from standard_script_setup import *

from CIME.case import Case
from CIME.utils import run_cmd, expect
from CIME.buildlib import parse_input

logger = logging.getLogger(__name__)

###############################################################################
def _main_func():
###############################################################################

    caseroot, libroot, bldroot = parse_input(sys.argv)

    # run buildlib variant based on detection of cesm/cime version

    comp_root_dir_ocn = Case(caseroot).get_value("COMP_ROOT_DIR_OCN")

    if os.path.exists(os.path.join(caseroot,"env_workflow.xml")):
        cmd = "{} {} {} {}".format(os.path.join(comp_root_dir_ocn, "cime_config", "buildlib_2.2"), caseroot, libroot, bldroot)
        rc, out, err = run_cmd(cmd)
        expect(rc == 0, "Command %s failed rc=%d\nout=%s\nerr=%s" % (cmd, rc, out, err))
        print(out)
    else:
        cmd = "{} {} {} {}".format(os.path.join(comp_root_dir_ocn, "cime_config", "buildlib_2.1"), caseroot, libroot, bldroot)
        rc, out, err = run_cmd(cmd)
        expect(rc == 0, "Command %s failed rc=%d\nout=%s\nerr=%s" % (cmd, rc, out, err))
        print(out)

###############################################################################

if __name__ == "__main__":
    _main_func()
