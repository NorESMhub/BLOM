#!/usr/bin/env python3

"""
BLOM namelist creator
"""
import sys
import os
import shutil
import logging
import glob

_CIMEROOT = os.environ.get("CIMEROOT")
if _CIMEROOT is None:
    raise SystemExit("ERROR: must set CIMEROOT environment variable")

_LIBDIR = os.path.join(_CIMEROOT, "CIME", "Tools")
if os.path.exists(_LIBDIR):
    sys.path.append(_LIBDIR)
else:
    _LIBDIR = os.path.join(_CIMEROOT,"scripts","lib","CIME")
    sys.path.append(os.path.join(_CIMEROOT, "scripts", "Tools"))

if not os.path.exists(_LIBDIR):
    raise SystemExit("ERROR: _LIBDIR does not exist")

# Save local (cime_config) directory path:
_CIME_CONFIG_PATH = os.path.dirname(os.path.abspath(__file__))

# Add local (cime_config) directory to python path:
sys.path.append(_CIME_CONFIG_PATH)

# Add ability to handle using a case as a dictionary rather a CIME case object
# pylint: disable=wildcard-import, wrong-import-position
# pylint: disable=unused-wildcard-import
from standard_script_setup import *
from CIME.buildnml import create_namelist_infile, parse_input
from CIME.case     import Case
from CIME.utils    import expect
from case_dict     import CaseDict

# Import BLOM's ParamGen class:
from ocn_in_paramgen import OcnInParamGen

# Open CIME case log:
_LOGGER = logging.getLogger(__name__)

###############################################################################
def buildnml(case, caseroot, compname):
###############################################################################
    # pylint: disable=too-many-locals
    """Build the blom namelist """

    # Build the component namelist
    if compname != "blom":
        emsg = "BLOM buildnml called with model={}"
        raise AttributeError(emsg.format(compname))
    # End if

    srcroot                   = case.get_value("SRCROOT")
    din_loc_root              = case.get_value("DIN_LOC_ROOT")
    caseroot                  = case.get_value("CASEROOT")
    rundir                    = case.get_value("RUNDIR")
    continue_run              = case.get_value("CONTINUE_RUN")
    ninst_ocn                 = case.get_value("NINST_OCN")
    run_type                  = case.get_value("RUN_TYPE")
    run_startdate             = case.get_value("RUN_STARTDATE")
    run_refcase               = case.get_value("RUN_REFCASE")
    run_refdate               = case.get_value("RUN_REFDATE")
    run_reftod                = case.get_value("RUN_REFTOD")
    ocn_grid                  = case.get_value("OCN_GRID")
    ocn_ncpl                  = case.get_value("OCN_NCPL")
    pio_typename_ocn          = case.get_value("PIO_TYPENAME_OCN")
    pio_netcdf_format_ocn     = case.get_value("PIO_NETCDF_FORMAT_OCN")
    blom_unit                 = case.get_value("BLOM_UNIT")
    blom_vcoord               = case.get_value("BLOM_VCOORD")
    blom_river_nutrients      = case.get_value("BLOM_RIVER_NUTRIENTS")
    blom_n_deposition         = case.get_value("BLOM_N_DEPOSITION")
    blom_ndep_scenario        = case.get_value("BLOM_NDEP_SCENARIO")
    blom_coupling             = case.get_value("BLOM_COUPLING")
    blom_tracer_modules       = case.get_value("BLOM_TRACER_MODULES")
    hamocc_ciso               = case.get_value("HAMOCC_CISO")
    hamocc_sedbypass          = case.get_value("HAMOCC_SEDBYPASS")
    hamocc_sedspinup          = case.get_value("HAMOCC_SEDSPINUP")
    hamocc_sedspinup_yr_start = case.get_value("HAMOCC_SEDSPINUP_YR_START")
    hamocc_sedspinup_yr_end   = case.get_value("HAMOCC_SEDSPINUP_YR_END")
    hamocc_sedspinup_ncycle   = case.get_value("HAMOCC_SEDSPINUP_NCYCLE")
    is_test                   = case.get_value("TEST")

    blom_vcoord = case.get_value("BLOM_VCOORD")
    turbclo = case.get_value("BLOM_TURBULENT_CLOSURE")
    expect(blom_vcoord != "cntiso_hybrid" or not turbclo,
           f"BLOM_VCOORD == {blom_vcoord} and BLOM_TURBULENT_CLOSURE == {turbclo} is not a valid combination")

    #--------------------------
    # Construct ParamGen objects:
    #--------------------------

    xml_fil = os.path.join(srcroot,"components","blom","cime_config","namelist_definition_blom.xml")
    pg_blom = OcnInParamGen.from_namelist_xml(xml_fil)

    #------------------------
    # Loop over all instances:
    #------------------------

    # Set input data list file name:
    input_data_list = os.path.join(caseroot, "Buildconf", "blom.input_data_list")

    # Convert instance number to integer:
    ninst = int(ninst_ocn)

    for inst_counter in range(1, ninst+1):

        #----------------------
        # Remove old input data:
        #----------------------

        if os.path.isfile(input_data_list):
            os.remove(input_data_list)

        # -----------------------------------------------------
        # Determine instance string
        # -----------------------------------------------------

        inst_string = ""
        if ninst > 1:
            single_case_rpointer = os.path.join(rundir, "rpointer.ocn")
            inst_string = '_%04d' % inst_counter
            instance_rpointer = os.path.join(rundir, "rpointer.ocn"+inst_string)

            # If multi-instance case does not have restart file, use
            # single-case restart for each instance

            if os.path.isfile(single_case_rpointer) and \
               not os.path.isfile(instance_rpointer):
                shutil.copy(single_case_rpointer, instance_rpointer)
            # End if
        # End if

        # -----------------------------------------------------
        # Create blomconf/namelist
        # -----------------------------------------------------

        infile_lines = []

        # Determine location and name of "user_nl_blom" files:
        user_nl_file = os.path.join(caseroot, "user_nl_blom" + inst_string)

        # Determine location and name of namelist input file:
        confdir = os.path.join(caseroot,"Buildconf","blomconf")
        if not os.path.isdir(confdir):
            os.makedirs(confdir)
        namelist_infile = os.path.join(confdir, "namelist_infile")

        #--------------------------------
        # Create CIME namelist input file:
        #--------------------------------
        create_namelist_infile(case, user_nl_file, namelist_infile,
                               "\n".join(infile_lines))

        #-------------------------------------------
        # Add user_nl_blom entries to ParamGen object:
        #-------------------------------------------

        pg_blom.append_user_nl_file(user_nl_file)

        #-------------------------------------------------
        # Create config dictionary
        #-------------------------------------------------

        # create config dictionary - used in namelist_definition_blom.xml
        config = {}
        config['ocn_grid'] = ocn_grid
        config['ocn_ncpl'] = str(ocn_ncpl)
        config['pio_typename_ocn'] = pio_typename_ocn
        config['pio_netcdf_format_ocn'] = pio_netcdf_format_ocn
        config["continue_run"] = "yes" if continue_run else "no"
        config['blom_unit'] = blom_unit if blom_unit else "unset"
        config['blom_vcoord'] = blom_vcoord
        config["blom_river_nutrients"] = "yes" if blom_river_nutrients else "no"
        config["blom_ndep_scenario"] = "ssp" if "ssp" in blom_ndep_scenario else blom_ndep_scenario
        config["blom_n_deposition"] = "yes" if blom_n_deposition else "no"
        config["blom_coupling"] = blom_coupling
        config["blom_tracer_modules"] = blom_tracer_modules
        config["hamocc_ciso"] = "yes" if hamocc_ciso else "no"
        config["hamocc_sedbypass"] = "yes" if hamocc_sedbypass else "no"
        config["hamocc_sedspinup"] = "yes" if hamocc_sedspinup else "no"
        config["hamocc_sedspinup_yr_start"] = hamocc_sedspinup_yr_start
        config["hamocc_sedspinup_yr_end"] = hamocc_sedspinup_yr_end
        config["hamocc_sedspinup_ncycle"] = hamocc_sedspinup_ncycle
        config["is_test"] = "yes" if is_test else "no"

        # TODO: the following needs to have new ways to turn this to "yes"
        config["use_agg"] = "no"
        config["use_wlin"] = "yes"

        if is_test:
            testcase = case.get_value("TESTCASE")
            config["is_test_pfs"] = "yes" if testcase == "PFS" else "no"
            config["empty_hist"] = "yes" if testcase == "PFS" else "no"

        #---------------------------------
        # Set all ParamGen namelist values:
        #---------------------------------
        # Note - the following are $CASEROOT xml variables that are used
        # in namelist_definition_blom.xml in order to do variable substitution
        # for the final namelist value

        case_dict = CaseDict()
        var_list = ('DIN_LOC_ROOT', 'RUN_TYPE', 'BLOM_VCOORD','BLOM_NDEP_SCENARIO',
                    'CCSM_CO2_PPMV','OCN_CO2_TYPE',
                    'HAMOCC_SEDSPINUP_YR_START','HAMOCC_SEDSPINUP_YR_END',
		    'HAMOCC_SEDSPINUP_NCYCLE')
        for item in var_list:
            case_dict[item] = case.get_value(item)

        pg_blom.reduce_ocn_in(case_dict, config)

        #----------------------------------------------------
        # Reset values of some variables
        #----------------------------------------------------

        run_startdate = case.get_value("RUN_STARTDATE")
        idate = run_startdate.replace('-','')
        pg_blom.set_value("idate", idate)
        pg_blom.set_value("idate0", idate)

        if pg_blom.get_value('swaclimfile') == 'UNSET':
            pg_blom.set_value('swaclimfile', value='')

        if pg_blom.get_value('inid13c') == 'UNSET':
            pg_blom.set_value('inid13c', value='')

        if pg_blom.get_value('inid14c') == 'UNSET':
            pg_blom.set_value('inid14c', value='')

        #---------------------------
        # Write out Fortran namelist:
        #---------------------------

        # Create resolved BLOM namelist file name:
        namelist_file = os.path.join(rundir, "ocn_in")

        # Change namelist file name depending on instance:
        namelist_file += inst_string

        # Create BLOM namelist
        groups=['limits','diffusion','merdia','secdia','diaphy']

        groups.append('cwmod')

        if case.get_value("BLOM_VCOORD") == "cntiso_hybrid":
            groups.append('vcoord')

        if "ecosys" in case.get_value("BLOM_TRACER_MODULES"):
            groups.append("bgcnml")
            groups.append("bgcoafx")
            groups.append("diabgc")
            groups.append("config_bgc")

        # for now don't write out bgcparams - just create an empty namelist
        if "ecosys" in case.get_value("BLOM_TRACER_MODULES"):
             groups.append("bgcparams")
             """
             !!! The following line deletes all entries for group 'bgcparams' 
             !!! that are ONLY present in namelist_definition_blom.xml 
             !!! and keeps entries provided through user_nl_blom
             !!! This makes sure that i) only Fortran-hard coded values from mo_param_bgc.F90
             !!! are used and that ii) user_nl_blom enables tuning these default parameters.
             !!! Note that an entry in namelist_definition_blom.xml for the tuning parameter 
             !!! is still required, while its value can be set to None. 
             !!! This is an interim solution and the line below can be simply deleted, once 
             !!! xml is used as default for the bgcparams namelist as well.
             """
             pg_blom.keep_usernml_only('bgcparams')

        pg_blom.write_nmlfile(namelist_file, groups)

        # Replace MER_REGFLAG1 -> MER_REGFLAG4 with array syntax in ocn_in
        from pathlib import Path
        filename = Path(namelist_file)
        filename.write_text(filename.read_text().replace('mer_regflg1','mer_regflg(1,:)'))
        filename.write_text(filename.read_text().replace('mer_regflg2','mer_regflg(2,:)'))
        filename.write_text(filename.read_text().replace('mer_regflg3','mer_regflg(3,:)'))
        filename.write_text(filename.read_text().replace('mer_regflg4','mer_regflg(4,:)'))

        # Write out blom.input_data_list
        data_list_path = os.path.join(case.get_case_root(), "Buildconf", "blom.input_data_list")
        if os.path.exists(data_list_path):
            os.remove(data_list_path)
        pg_blom.write_inputdata(data_list_path, groups)

    # To compare with previous namelist generation, make namelist variable uppercase and
    # use single quotes instead of back quotes and make sure that file variables set to UNSET
    # get changed to blank quotes
    namelist_file_temp = os.path.join(confdir, "ocn_in_temp")
    with open(namelist_file, "r") as fread:
        with open(namelist_file_temp, "w") as fwrite:
            for line_read in fread:
                # replace single quote with double quote to generate same namelist as using
                # csh buildnml
                line = line_read.replace('"',"'")
                # make all namelists upper case to generate same namelist as using csh buildnml
                tokens = line.split('=',maxsplit=1)
                if len(tokens) == 2:
                    # Change UNSET values for files to lower case
                    if 'UNSET' in tokens[1]:
                        tokens[1] = "'unset'"
                    fwrite.write(f"  {tokens[0].upper().strip()} = {tokens[1].strip()}\n")
                else:
                    fwrite.write(line)
    shutil.move(namelist_file_temp, namelist_file)

###############################################################################
def _main_func():

    caseroot = parse_input(sys.argv)
    with Case(caseroot) as case:
        buildnml(case, caseroot, "blom")
    # End with

if __name__ == "__main__":
    _main_func()
